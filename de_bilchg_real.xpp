
#include "RFIDchange.h"
#include "NoteChange.h"

static int cmd,re,i;
static int x,y,z;
static RFIDrwModle RFIDFUN;

static NoteChanger nc;


//
de_bilchg_t::de_bilchg_t()
{
	m_de_ShouldReset = 0;  
}


//
de_bilchg_t::~de_bilchg_t()
{
}





//
void de_bilchg_t::OnRunTask( std::string t ) 
{
		goto L_TASKEND;
	
L_TASKEND:
 
	return;
}


// 
int de_bilchg_t::tr_on_user_run()
{
	do{

	}while(0);

	
	if( m_de_ShouldReset ) 
		this->bilchgReset();

	WThrd::tr_sleepu( 13 );

	return 1;
}


// 
void de_bilchg_t::bilchgAdvice()
{
	gp_frontinput->input_KIN_BILLCHG();
}


// 
void de_bilchg_t::bilchgInit()
{
	using namespace std;
	MYAUTOLOCK( m_DevLck );
	b8705_t::ROWTYPE &Rb8705(gp_db->GetTheRowb8705());

	//初始化rfid
	re=RFIDFUN.OpenCom();

	//gp_ui->LineScrPrintA( gp_conf->Get_bilchgrfid_com_port() );
	//gp_ui->LineScrPrintA( (int)re );
	
	while( re != 0 )
	{
		re=RFIDFUN.OpenCom();
		Rb8705.m_RtnVal = re;
		Rb8705.m_ConnState = 0;
		Rb8705.m_BigErr = 0;
		this->bilchgAdvice();
		WThrd::tr_sleepu( 5.3 );
	}

	//init bilchg
	while( !nc.OpenCom() )
	{
		//gp_ui->LineScrPrintA( gp_conf->Get_bilchg_com_port() );

		Rb8705.m_ConnState = 0;
		Rb8705.m_BigErr = 0;
		this->bilchgAdvice();
		WThrd::tr_sleepu( 5.1 );
	}

	//reset
	Rb8705.m_RtnVal = this->bilchgReset();
	
	Rb8705.m_RtnVal = re;
	Rb8705.m_ConnState = 1;
	Rb8705.m_BigErr = 0;
	
	this->bilchgAdvice();

	m_de_state = 0;

	this->tr_open();
}


//
int de_bilchg_t::bilchgReset()
{
	MYAUTOLOCK( m_DevLck );
	b8705_t::ROWTYPE &Rb8705(gp_db->GetTheRowb8705());
	int iResult;
	int irc = 0;
	BYTE inData[7]={0};
	BYTE outData[6]={0};

	inData[0]=(BYTE)128;
	inData[1]=0x91;
	inData[2]=0x7D;
	inData[3]=0x96;
	inData[4]=0x82;
	inData[5]=0x0C;
	inData[6]=0x0C;

	//获取找零箱 
	iResult = nc.Init(inData,outData);

	if( iResult == 0 )
	{
		if( Rb8705.m_boxExist.a[0] != (int)outData[0] ) 	// 0：第一个钱箱存在	1：第一个钱箱不存在	
			irc ++, Rb8705.m_boxExist.a[0] = (int)outData[0];
		if( Rb8705.m_boxExist.a[1] != (int)outData[1] )	// 	0：第2个钱箱存在	1：第2个钱箱不存在	
			irc ++, Rb8705.m_boxExist.a[1] = (int)outData[1]; 
		if( Rb8705.m_boxExist.a[2] != (int)outData[2] )	//	0：回收箱存在	1：回收箱不存在	
			irc ++, Rb8705.m_boxExist.a[2] = (int)outData[2]; 

		if( Rb8705.m_boxNearEmpty.a[0] != (int)outData[3] )	//	0: 第一个钱箱目前不空  1:第一个钱箱即将空	
			irc ++, Rb8705.m_boxNearEmpty.a[0] = (int)outData[3];	 
		if( Rb8705.m_boxNearEmpty.a[1] != (int)outData[4] )	// 	0: 第二个钱箱目前不空	1:第二个钱箱即将空	
			irc ++, Rb8705.m_boxNearEmpty.a[1] = (int)outData[4];	 
		if( Rb8705.m_boxFull.a[2] != (int)outData[5] )		//	0:回收箱空	1:回收箱满	
			irc ++, Rb8705.m_boxFull.a[2] = (int)outData[5];		 
	}
	else
		goto L_MAY_ADVICE;


	//获取rfid 
	//2.7.	钱箱装载信息		int BoxInfomation(int vBoxNum)
	for( x = 0; x <= 2 ; x++ )
	{
		iResult = re=RFIDFUN.BoxInfomation( x + 1 );
		if(re==0)
		{
			int k;	// 

			if( x == 0 ) k = 2;	// 因为返回值是 0、1、2 = 废、0、1，所以此时要调整一下。	
			if( x == 1 ) k = 0;
			if( x == 2 ) k = 1;

			if( Rb8705.m_BoxState.a[k] != RFIDFUN.BoxInfoList[x].BoxState )
				irc ++, Rb8705.m_BoxState.a[k] = RFIDFUN.BoxInfoList[x].BoxState;
			if( Rb8705.m_LineID.a[k] != RFIDFUN.BoxInfoList[x].LineID )
				irc ++, Rb8705.m_LineID.a[k] = RFIDFUN.BoxInfoList[x].LineID;
			if( Rb8705.m_StationID.a[k] != RFIDFUN.BoxInfoList[x].StationID )
				irc ++, Rb8705.m_StationID.a[k] = RFIDFUN.BoxInfoList[x].StationID;
			if( Rb8705.m_err.a[k] != RFIDFUN.BoxInfoList[x].err )
				irc ++, Rb8705.m_err.a[k] = RFIDFUN.BoxInfoList[x].err;


			if( Rb8705.m_Denomination_TmpRead.a[k] != RFIDFUN.BoxInfoList[x].Denomination )
				irc ++, Rb8705.m_Denomination_TmpRead.a[k] = RFIDFUN.BoxInfoList[x].Denomination;

			if( Rb8705.m_Number_TmpRead.a[k] != RFIDFUN.BoxInfoList[x].Number )
				irc ++, Rb8705.m_Number_TmpRead.a[k] = RFIDFUN.BoxInfoList[x].Number;

			if( Rb8705.m_Count_TmpRead.a[k] != RFIDFUN.BoxInfoList[x].Count )
				irc ++, Rb8705.m_Count_TmpRead.a[k] = RFIDFUN.BoxInfoList[x].Count;


			//if( Rb8705.m_BoxState.a[x] != 3 ) Rb8705.m_boxExist.a[x] = 1;  应用层必须同时判断状态、存在、空、满 

		}
		else
			goto L_MAY_ADVICE;
	}
	

	for( x = 0; x <= 2 ; x++ )
	{
		if( Rb8705.m_rfid_ret_flag_arr.a[x] == 0 )
		{
			Rb8705.m_Denomination.a[x] = Rb8705.m_Denomination_TmpRead.a[x];
			Rb8705.m_Number.a[x] = Rb8705.m_Number_TmpRead.a[x];
			Rb8705.m_Count.a[x] = Rb8705.m_Count_TmpRead.a[x];
		}
	}


L_MAY_ADVICE:
	if( irc ) this->bilchgAdvice();

	if( iResult == 0 ) 
		m_de_ShouldReset = 0;  

	return iResult;
}




//
int de_bilchg_t::bilchgState()
{
	MYAUTOLOCK( m_DevLck );
	b8705_t::ROWTYPE &Rb8705(gp_db->GetTheRowb8705());
	int iResult;
	int irc = 0;
	BYTE outData[6]={0};

	//获取找零箱 
	iResult = nc.Status(outData);

	if( iResult == 0 )
	{
		if( Rb8705.m_boxExist.a[0] != (int)outData[0] ) 	// 0：第一个钱箱存在	1：第一个钱箱不存在	
			irc ++, Rb8705.m_boxExist.a[0] = (int)outData[0];
		if( Rb8705.m_boxExist.a[1] != (int)outData[1] )	// 	0：第2个钱箱存在	1：第2个钱箱不存在	
			irc ++, Rb8705.m_boxExist.a[1] = (int)outData[1]; 
		if( Rb8705.m_boxExist.a[2] != (int)outData[2] )	//	0：回收箱存在	1：回收箱不存在	
			irc ++, Rb8705.m_boxExist.a[2] = (int)outData[2]; 

		if( Rb8705.m_boxNearEmpty.a[0] != (int)outData[3] )	//	0: 第一个钱箱目前不空  1:第一个钱箱即将空	
			irc ++, Rb8705.m_boxNearEmpty.a[0] = (int)outData[3];	 
		if( Rb8705.m_boxNearEmpty.a[1] != (int)outData[4] )	// 	0: 第二个钱箱目前不空	1:第二个钱箱即将空	
			irc ++, Rb8705.m_boxNearEmpty.a[1] = (int)outData[4];	 
		if( Rb8705.m_boxFull.a[2] != (int)outData[5] )		//	0:回收箱空	1:回收箱满	
			irc ++, Rb8705.m_boxFull.a[2] = (int)outData[5];		 
	}
	else
		goto L_MAY_ADVICE;



	//获取rfid 
	//2.7.	钱箱装载信息		int BoxInfomation(int vBoxNum)
	for( x = 0; x <= 2 ; x++ )
	{
		iResult = re=RFIDFUN.BoxInfomation( x + 1 );
		if(re==0)
		{
			int k;	// 

			if( x == 0 ) k = 2;	// 因为返回值是 0、1、2 = 废、0、1，所以此时要调整一下。	
			if( x == 1 ) k = 0;
			if( x == 2 ) k = 1;

			if( Rb8705.m_BoxState.a[k] != RFIDFUN.BoxInfoList[x].BoxState )
				irc ++, Rb8705.m_BoxState.a[k] = RFIDFUN.BoxInfoList[x].BoxState;
			if( Rb8705.m_LineID.a[k] != RFIDFUN.BoxInfoList[x].LineID )
				irc ++, Rb8705.m_LineID.a[k] = RFIDFUN.BoxInfoList[x].LineID;
			if( Rb8705.m_StationID.a[k] != RFIDFUN.BoxInfoList[x].StationID )
				irc ++, Rb8705.m_StationID.a[k] = RFIDFUN.BoxInfoList[x].StationID;
			if( Rb8705.m_err.a[k] != RFIDFUN.BoxInfoList[x].err )
				irc ++, Rb8705.m_err.a[k] = RFIDFUN.BoxInfoList[x].err;


			if( Rb8705.m_Denomination_TmpRead.a[k] != RFIDFUN.BoxInfoList[x].Denomination )
				irc ++, Rb8705.m_Denomination_TmpRead.a[k] = RFIDFUN.BoxInfoList[x].Denomination;
			if( Rb8705.m_Number_TmpRead.a[k] != RFIDFUN.BoxInfoList[x].Number )
				irc ++, Rb8705.m_Number_TmpRead.a[k] = RFIDFUN.BoxInfoList[x].Number;
			if( Rb8705.m_Count_TmpRead.a[k] != RFIDFUN.BoxInfoList[x].Count )
				irc ++, Rb8705.m_Count_TmpRead.a[k] = RFIDFUN.BoxInfoList[x].Count;

			//if( Rb8705.m_BoxState.a[x] != 3 ) Rb8705.m_boxExist.a[x] = 1; 应用层必须同时判断状态、存在、空、满 

		}
		else
			goto L_MAY_ADVICE;
	}


	for( x = 0; x <= 2 ; x++ )
	{
		if( Rb8705.m_rfid_ret_flag_arr.a[x] == 0 )
		{
			Rb8705.m_Denomination.a[x] = Rb8705.m_Denomination_TmpRead.a[x];
			Rb8705.m_Number.a[x] = Rb8705.m_Number_TmpRead.a[x];
			Rb8705.m_Count.a[x] = Rb8705.m_Count_TmpRead.a[x];
		}
	}


L_MAY_ADVICE:
	if( irc ) this->bilchgAdvice();

	return iResult;
}



//
int de_bilchg_t::bilchgBoxInstall( int iBoxNum, tuint32 Uid, tuint8 LineNum, tuint8 vStationNum ) 	//boxnum以0为基准。	
{
	MYAUTOLOCK( m_DevLck );
	unsigned char useridstr[4];
	std::string s1;
	std::vector<std::string> vec1;
	SCake ck;

	s1 = "00000000" + SStrf::sultoa( Uid );
	while( s1.size() > 8 ) s1.erase( s1.begin() );
	SStrvs::vsa_impbylen( s1, 2, vec1 );
	s1="";
	for( std::vector<std::string>::size_type i = 0; i < vec1.size(); i++ ) 	s1 += vec1[i] + " ";
	ck.ConvStr2Bin(s1);
	std::copy( (tuint8*)(ck.buf()), (tuint8*)(ck.buf() + ck.len()), useridstr );

	unsigned char nowtimestr[7];
	SDte dt;
	std::vector<tuint8> v;

	dt.MakeNow();
	dt.GetBcdArr(v);
	std::copy( v.begin(), v.end(), nowtimestr );

	re=RFIDFUN.BoxInstall( iBoxNum + 1,(unsigned char *)useridstr, LineNum, vStationNum, (unsigned char *)nowtimestr );

	return re;
}


//
int de_bilchg_t::bilchgChangeOut_internal( int iBoxNum, tuint32 Num )
{
	b8705_t::ROWTYPE &Rb8705(gp_db->GetTheRowb8705());
	int iResult;

	//1、读state
	if(1)
	{
		iResult = this->bilchgState();
		if( iResult != 0 )
		{
			return Rb8705.m_RtnVal = iResult;
		}
	}

	if( !( Rb8705.m_boxExist.a[iBoxNum] == 0 && Rb8705.m_BoxState.a[iBoxNum] == 3 ) )		// 0： 钱箱存在
	{
		return Rb8705.m_RtnVal = -999;
	}

	//2、读钱箱
	if(1)
	{
		MYAUTOLOCK( m_DevLck );

		re=RFIDFUN.BoxRead( iBoxNum + 1 );
		if(re!=0)
		{
			for(i=0;i<7;i++)
				Rb8705.m_RWerror.a[i] = RFIDFUN.RWerror[i];

			return Rb8705.m_RtnVal = re;
		}
	}

	//3、找钱出X张
	if(1)
	{
		MYAUTOLOCK( m_DevLck );
		BYTE inData[6]={0};
		BYTE outData[299]={0};
		BYTE outData1[6]={0};
		BYTE rejectData[2];
		int int_ret;

		inData[0] =	inData[1]=(BYTE)0;
		if( iBoxNum == 0 )
			inData[0]=(BYTE)Num;
		else
			inData[1]=(BYTE)Num;
		inData[2]=(BYTE)2;
		inData[3]=(BYTE)2;
		inData[4]=(BYTE)2;
		inData[5]=(BYTE)2;
		int_ret = nc.Count(inData,outData,rejectData,outData1);	//	找出纸币	

		// 记录： 找出的纸币数目	找出废币数目 。
		// 如果找成功，则只有拒绝数字有效。
		// 如果找失败，则找出数和拒绝数都有效。	
		if( int_ret == 0 )	
		{
			Rb8705.m_OutNumber.a[iBoxNum] = Num;
			Rb8705.m_rejectNumber.a[iBoxNum] = rejectData[iBoxNum];
			 Rb8705.m_RtnVal = int_ret;
		}
		
		if( int_ret > 0 )	
		{
			Rb8705.m_OutNumber.a[iBoxNum] = outData[iBoxNum];
			Rb8705.m_rejectNumber.a[iBoxNum] = rejectData[iBoxNum];
			 Rb8705.m_RtnVal = int_ret;
		}
		
		if( int_ret < 0 )	
		{
			return Rb8705.m_RtnVal = int_ret;
		}
		

		int iResult = int_ret;

		if( iBoxNum == 0 )
		{
			if( iResult == 0 ) // 箱不空  
				Rb8705.m_boxIsEmpty.a[iBoxNum] = 0;

			if( iResult == 2 )  // 2	找零箱1空 
				Rb8705.m_boxIsEmpty.a[iBoxNum] = 1;
		}

		if( iBoxNum == 1 ) 
		{
			if( iResult == 0 ) //  箱不空  
				Rb8705.m_boxIsEmpty.a[iBoxNum] = 0;

			if( iResult == 3 )  // 3	找零箱2空 
				Rb8705.m_boxIsEmpty.a[iBoxNum] = 1;
		}


		if( iResult != 0 && iResult != 2 )
		{
			m_de_ShouldReset = 1;  
			Rb8705.m_BigErr = 1;
		}

	}

	//4、写钱箱
	if(1)
	{
		if( Rb8705.m_OutNumber.a[iBoxNum] != 0 )
		{
			//写出钱钱箱	
			x = iBoxNum + 1;
			y = Rb8705.m_Denomination.a[iBoxNum];
			Rb8705.m_Number.a[iBoxNum] -= Rb8705.m_OutNumber.a[iBoxNum] - Rb8705.m_rejectNumber.a[iBoxNum];
			z = Rb8705.m_Number.a[iBoxNum];
			Rb8705.m_Count.a[iBoxNum] = y*z;
			re=RFIDFUN.BoxWrite( x , y, z, Rb8705.m_Count.a[iBoxNum] );	//写	

			if(re!=0)
			{
				for(i=0;i<7;i++)
					Rb8705.m_RWerror.a[i] = RFIDFUN.RWerror[i];

				return Rb8705.m_rfid_ret_flag = Rb8705.m_rfid_ret_flag_arr.a[iBoxNum] =re;
			}
		}

		if( Rb8705.m_rejectNumber.a[iBoxNum] != 0 )
		{
			//写 废币 钱箱	
			x = 3;
			y = Rb8705.m_Denomination.a[iBoxNum];
			Rb8705.m_Number.a[2] += Rb8705.m_rejectNumber.a[iBoxNum];
			z = Rb8705.m_Number.a[2];
			Rb8705.m_Count.a[2] += y*Rb8705.m_rejectNumber.a[iBoxNum];
			re=RFIDFUN.BoxWrite( x , y, z, Rb8705.m_Count.a[2] );	//写	

			if(re!=0)
			{
				for(i=0;i<7;i++)
					Rb8705.m_RWerror.a[i] = RFIDFUN.RWerror[i];

				return Rb8705.m_rfid_ret_flag = Rb8705.m_rfid_ret_flag_arr.a[2]  = re;
			}
		}

	}

	return 0;
}


//
int de_bilchg_t::bilchgChangeOut( int iBoxNum, tuint32 Num )
{
	b8705_t::ROWTYPE &Rb8705(gp_db->GetTheRowb8705());
	int iResult;

	iResult = bilchgChangeOut_internal( iBoxNum, Num );
				
	//if( iBoxNum == 0 )
	//{
	//	if( iResult == 0 ) // 箱不空  
	//		Rb8705.m_boxIsEmpty.a[iBoxNum] = 0;

	//	if( iResult == 2 )  // 2	找零箱1空 
	//		Rb8705.m_boxIsEmpty.a[iBoxNum] = 1;
	//}

	//if( iBoxNum == 1 ) 
	//{
	//	if( iResult == 0 ) //  箱不空  
	//		Rb8705.m_boxIsEmpty.a[iBoxNum] = 0;

	//	if( iResult == 3 )  // 3	找零箱2空 
	//		Rb8705.m_boxIsEmpty.a[iBoxNum] = 1;
	//}

	return iResult;
}



